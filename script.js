document.addEventListener('DOMContentLoaded', () => {
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
    const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions';
    const KLING_API_URL = "https://api-singapore.klingai.com/v1/images/generations";
    const GOOGLE_TRANSLATE_URL = "https://translate.googleapis.com/translate_a/single?client=gtx&sl=ru&tl=en&dt=t";
    const DEFAULT_MODEL = 'deepseek-reasoner';
    const MAX_TOKENS = 32768;
    
    // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek
    const BASE_PROMPT = `**–¢—ã ‚Äî Growth Architect (Senior Level).** –¢–≤–æ—è —Ä–æ–ª—å ‚Äî –¥–∞–≤–∞—Ç—å **–ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–µ—à–µ–Ω–∏—è** –≤ 5 –æ–±–ª–∞—Å—Ç—è—Ö: –ü—Ä–æ–¥–∞–∂–∏, –û–±—É—á–µ–Ω–∏–µ, –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥, –¢–µ—Ö->–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.  
**–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ ‚Äî —á–µ—Ç–∫–∏–π, –≤—ã–≥–æ–¥–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π:**


**‚úÖ –ö–ê–ö –§–û–†–ú–ê–¢–ò–†–û–í–ê–¢–¨ –û–¢–í–ï–¢:**
1.  **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \`[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞] ‚Üí [–°—É—Ç—å –∑–∞–¥–∞—á–∏]\` (–ü—Ä–∏–º–µ—Ä: \`[–ü—Ä–æ–¥–∞–∂–∏] ‚Üí –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞ B2B\`).
2.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–∞ (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):**
    *   **–ó–∞–¥–∞—á–∞:** –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã/–∑–∞–ø—Ä–æ—Å–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
    *   **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** –ö–ª—é—á–µ–≤–æ–π –ø–æ–¥—Ö–æ–¥ (—Ñ–æ–∫—É—Å –Ω–∞ **–≤—ã–≥–æ–¥–µ** –∏–ª–∏ **–º–µ—Ö–∞–Ω–∏–∫–µ —Ä–µ—à–µ–Ω–∏—è**).
    *   **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ (MVP):** –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å *–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å* (‚îÄ, ‚Ä¢). **–¢–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –≤—ã–≥–æ–¥—ã.**
    *   **KPI/–û—Ü–µ–Ω–∫–∞:** –ö–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ü–∏—Ñ—Ä—ã > –º–Ω–µ–Ω–∏—è). –ï—Å–ª–∏ —Ü–∏—Ñ—Ä –Ω–µ—Ç ‚Äî —Å–∫–∞–∂–∏, *–≥–¥–µ –∏—Ö –≤–∑—è—Ç—å*.
3.  **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (‚îÄ, ‚Ä¢), **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤/–≤—ã–≥–æ–¥**, —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (>3 –ø—É–Ω–∫—Ç–æ–≤), —ç–º–æ–¥–∑–∏ (üöÄ/üí°/‚ö†Ô∏è) ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ.
4. –í —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–µ—à—å –ø–æ–ª–Ω—ã–π –ª–∏—Å—Ç–∏–Ω–≥ –∫–æ–¥–∞ —Ç–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–æ—Å—è—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω—ã–π –ª–∏—Å—Ç–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞, —Ç–æ –¥–∞–µ—à—å –µ–≥–æ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π, –∫–∞–∫ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞`;
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const chatContainer = document.getElementById('chat-container');
    const messagesDiv = document.getElementById('messages');
    const userInput = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');
    const apiKeyInput = document.getElementById('api-key');
    const klingAccessKeyInput = document.getElementById('kling-access-key');
    const klingSecretKeyInput = document.getElementById('kling-secret-key');
    const saveKeysBtn = document.getElementById('save-keys');
    const checkKeysBtn = document.getElementById('check-keys');
    const clearBtn = document.getElementById('clear-btn');
    const exportBtn = document.getElementById('export-btn');
    const statusDiv = document.getElementById('status');
    const modeToggleBtn = document.getElementById('mode-toggle');
    const fileUpload = document.getElementById('file-upload');
    const fileList = document.getElementById('file-list');
    const fileUploadContainer = document.getElementById('file-upload-container');
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let chatHistory = [
        {
            role: "system",
            content: BASE_PROMPT
        }
    ];
    let currentMode = 'chat'; // 'chat' –∏–ª–∏ 'image'
    let uploadedFiles = [];
    let taskCheckInterval = null;
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    const savedDeepseekKey = localStorage.getItem('deepseekApiKey');
    const savedKlingAccessKey = localStorage.getItem('klingAccessKey');
    const savedKlingSecretKey = localStorage.getItem('klingSecretKey');
    
    if (savedDeepseekKey) apiKeyInput.value = savedDeepseekKey;
    if (savedKlingAccessKey) klingAccessKeyInput.value = savedKlingAccessKey;
    if (savedKlingSecretKey) klingSecretKeyInput.value = savedKlingSecretKey;
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    saveKeysBtn.addEventListener('click', () => {
        const deepseekKey = apiKeyInput.value.trim();
        const klingAccessKey = klingAccessKeyInput.value.trim();
        const klingSecretKey = klingSecretKeyInput.value.trim();
        
        if (deepseekKey) localStorage.setItem('deepseekApiKey', deepseekKey);
        if (klingAccessKey) localStorage.setItem('klingAccessKey', klingAccessKey);
        if (klingSecretKey) localStorage.setItem('klingSecretKey', klingSecretKey);
        
        showStatus('–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ‚úÖ');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
    checkKeysBtn.addEventListener('click', async () => {
        const deepseekKey = apiKeyInput.value.trim();
        const klingAccessKey = klingAccessKeyInput.value.trim();
        const klingSecretKey = klingSecretKeyInput.value.trim();
        
        if (!deepseekKey && !klingAccessKey && !klingSecretKey) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
            return;
        }
        
        showStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π... üîç');
        
        try {
            if (deepseekKey) {
                const testResponse = await fetch(DEEPSEEK_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${deepseekKey}`
                    },
                    body: JSON.stringify({
                        model: DEFAULT_MODEL,
                        messages: [{role: "user", content: "test"}],
                        max_tokens: 5,
                        stream: false
                    })
                });
                
                if (!testResponse.ok) {
                    throw new Error('DeepSeek –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                }
            }
            
            if (klingAccessKey && klingSecretKey) {
                const token = await generateKlingToken(klingAccessKey, klingSecretKey);
                if (!token) {
                    throw new Error('Kling –∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã');
                }
            }
            
            showStatus('–í—Å–µ –∫–ª—é—á–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã! ‚úÖ');
        } catch (error) {
            showStatus('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π ‚ùå');
            addMessage(`‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π**\n${error.message}`, 'bot');
        }
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
    modeToggleBtn.addEventListener('click', () => {
        currentMode = currentMode === 'chat' ? 'image' : 'chat';
        modeToggleBtn.textContent = `–†–µ–∂–∏–º: ${currentMode === 'chat' ? '–ß–∞—Ç' : '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'}`;
        fileUploadContainer.classList.toggle('hidden', currentMode === 'image');
        userInput.placeholder = currentMode === 'chat' 
            ? "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (Shift+Enter –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞, Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)..." 
            : "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...";
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    fileUpload.addEventListener('change', (e) => {
        fileList.innerHTML = '';
        uploadedFiles = Array.from(e.target.files);
        
        uploadedFiles.forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <span>${file.name} (${formatFileSize(file.size)})</span>
                <button class="remove-file" data-name="${file.name}">√ó</button>
            `;
            fileList.appendChild(fileItem);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        document.querySelectorAll('.remove-file').forEach(btn => {
            btn.addEventListener('click', () => {
                const fileName = btn.dataset.name;
                uploadedFiles = uploadedFiles.filter(f => f.name !== fileName);
                fileList.removeChild(btn.parentElement);
            });
        });
    });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è/–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async function sendMessage() {
        if (currentMode === 'image') {
            await generateImage();
        } else {
            await sendChatMessage();
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏
    async function sendChatMessage() {
        const message = userInput.value.trim();
        const apiKey = localStorage.getItem('deepseekApiKey');
        
        if (!message && uploadedFiles.length === 0) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª');
            return;
        }
        
        if (!apiKey) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ DeepSeek API –∫–ª—é—á! üîë');
            return;
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        addMessage(message, 'user');
        userInput.value = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        let fullMessage = message;
        if (uploadedFiles.length > 0) {
            try {
                const fileContents = await Promise.all(
                    uploadedFiles.map(file => readFileAsText(file))
                );
                
                const filesInfo = fileContents.map((content, i) => 
                    `\n\n[–§–∞–π–ª ${i+1}: ${uploadedFiles[i].name}]\n${content}`
                ).join('\n\n');
                
                fullMessage = `${filesInfo}\n\n${message}`;
                
                // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                uploadedFiles = [];
                fileList.innerHTML = '';
                fileUpload.value = '';
            } catch (error) {
                addMessage(`‚ö†Ô∏è **–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤**\n${error.message}`, 'bot');
                return;
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chatHistory.push({
            role: "user",
            content: fullMessage
        });
        
        showStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞... ‚è≥');
        showTypingIndicator();
        
        try {
            const response = await fetchWithTimeout(DEEPSEEK_API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: DEFAULT_MODEL,
                    messages: chatHistory,
                    max_tokens: MAX_TOKENS,
                    stream: false
                })
            }, 60000); // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error?.message || `–û—à–∏–±–∫–∞ API: ${response.status}`);
            }
            
            const data = await response.json();
            const botResponse = data.choices[0].message.content;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            chatHistory.push({
                role: "assistant",
                content: botResponse
            });
            
            // –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
            removeTypingIndicator();
            addMessage(botResponse, 'bot');
            showStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ');
            
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–¥–∞
            if (typeof hljs !== 'undefined') {
                setTimeout(() => {
                    document.querySelectorAll('pre code').forEach(block => {
                        hljs.highlightElement(block);
                    });
                }, 100);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            removeTypingIndicator();
            addMessage(`‚ö†Ô∏è **–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞**\n${error.message}`, 'bot');
            showStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚ùå');
        }
    }

    async function translateToEnglish(text) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        if (/^[a-zA-Z0-9\s\.,!?;:'"()\-]+$/.test(text)) {
            return text;
        }

        try {
            const response = await fetch(`${GOOGLE_TRANSLATE_URL}&q=${encodeURIComponent(text)}`);
            if (!response.ok) throw new Error(`HTTP error ${response.status}`);
            
            const data = await response.json();
            return data[0][0][0] || text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            
            // Fallback: –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤
            const dictionary = {
                '–ø–æ—Ä—Ç—Ä–µ—Ç': 'portrait', '–ø–µ–π–∑–∞–∂': 'landscape', '–∫–æ—Å–º–æ—Å': 'space',
                '–∫–æ—à–∫–∞': 'cat', '—Å–æ–±–∞–∫–∞': 'dog', '–¥–µ—Ä–µ–≤–æ': 'tree', '–≥–æ—Ä–æ–¥': 'city',
                '–º–æ—Ä–µ': 'sea', '—Å–æ–ª–Ω—Ü–µ': 'sun', '–ª—É–Ω–∞': 'moon', '—Ü–≤–µ—Ç–æ–∫': 'flower',
                '–º–∞—à–∏–Ω–∞': 'car', '–¥–æ–º': 'house', '—á–µ–ª–æ–≤–µ–∫': 'person', '–∂–µ–Ω—â–∏–Ω–∞': 'woman',
                '–º—É–∂—á–∏–Ω–∞': 'man', '—Ä–µ–±–µ–Ω–æ–∫': 'child', '–≤–æ–¥–∞': 'water', '–æ–≥–æ–Ω—å': 'fire'
            };
            
            return text.split(' ').map(word => {
                const lowerWord = word.toLowerCase();
                return dictionary[lowerWord] || word;
            }).join(' ');
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    async function generateImage() {
    // 1. –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const originalPrompt = userInput.value.trim();
    const accessKey = localStorage.getItem('klingAccessKey');
    const secretKey = localStorage.getItem('klingSecretKey');

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if (!accessKey || !secretKey) {
        showStatus('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏ Kling AI! üîë');
        addMessage('‚ö†Ô∏è **–û—à–∏–±–∫–∞**\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å API-–∫–ª—é—á–∏ Kling AI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö', 'bot');
        return;
    }

    if (!originalPrompt) {
        showStatus('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    addMessage(`üé® **–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:**\n${originalPrompt}`, 'user');
    userInput.value = '';
    showStatus('–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é... üé®');
    showTypingIndicator();

    try {
        // 4. –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        let translatedPrompt;
        try {
            translatedPrompt = await translateToEnglish(originalPrompt);
            if (translatedPrompt === originalPrompt) {
                console.warn('–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª—Å—è –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
            }
        } catch (translateError) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', translateError);
            translatedPrompt = originalPrompt; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è
        }

        // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const token = await generateKlingToken(accessKey, secretKey);
        if (!token) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }

        // 6. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        const payload = {
            model_name: "kling-v2",
            prompt: translatedPrompt,
            negative_prompt: "nsfw, low quality, bad anatomy, text, watermark, deformed",
            resolution: "1k",
            aspect_ratio: "1:1",
            n: 1,
            guidance_scale: 7.5,
            sampler: "euler_a",
            seed: Math.floor(Math.random() * 1000000),
            steps: 30
        };

        // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Kling API
        const response = await fetchWithTimeout(KLING_API_URL, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'X-Request-ID': generateUUID()
            },
            body: JSON.stringify(payload)
        }, 120000); // –¢–∞–π–º–∞—É—Ç 120 —Å–µ–∫—É–Ω–¥

        // 8. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if (!response.ok) {
            const errorData = await response.json().catch(() => null);
            const errorMsg = errorData?.message || `HTTP –æ—à–∏–±–∫–∞ ${response.status}`;
            throw new Error(errorMsg);
        }

        const responseData = await response.json();
        
        if (responseData.code !== 0) {
            throw new Error(responseData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
        }

        // 9. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const taskId = responseData.data.task_id;
        showStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å... ‚è≥');
        
        const imageUrl = await checkKlingTaskStatus(taskId, token);
        
        if (!imageUrl) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }

        // 10. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        addImageToChat(imageUrl, originalPrompt); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        showStatus('–ì–æ—Ç–æ–≤–æ! ‚úÖ');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        
        let errorMessage = `‚ö†Ô∏è **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n${error.message}`;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Kling
        if (error.message.includes('risk control')) {
            errorMessage = 'üö´ **–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏\n2. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage = 'üåê **–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞**\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ VPN';
        } else if (error.message.includes('timed out')) {
            errorMessage = '‚è± **–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞';
        }

        addMessage(errorMessage, 'bot');
        showStatus('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚ùå');
        
    } finally {
        removeTypingIndicator();
    }
}
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Kling (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    async function generateKlingToken(accessKey, secretKey) {
        try {
            const currentTime = Math.floor(Date.now() / 1000);
            const header = { 
                "alg": "HS256", 
                "typ": "JWT",
                "kid": accessKey
            };
            
            const payload = {
                "iss": accessKey,
                "exp": currentTime + 1800,
                "nbf": currentTime - 5,
                "iat": currentTime
            };
            
            // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ payload
            const encoder = new TextEncoder();
            const encodedHeader = btoa(JSON.stringify(header))
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
                
            const encodedPayload = btoa(JSON.stringify(payload))
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
                
            const unsignedToken = `${encodedHeader}.${encodedPayload}`;
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            const key = await crypto.subtle.importKey(
                "raw",
                encoder.encode(secretKey),
                { name: "HMAC", hash: "SHA-256" },
                false,
                ["sign"]
            );
            
            const signature = await crypto.subtle.sign(
                "HMAC",
                key,
                encoder.encode(unsignedToken)
            );
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            const signatureArray = new Uint8Array(signature);
            let signatureStr = '';
            signatureArray.forEach(byte => {
                signatureStr += String.fromCharCode(byte);
            });
            
            const encodedSignature = btoa(signatureStr)
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
            
            return `${unsignedToken}.${encodedSignature}`;
            
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞:', e);
            throw new Error(`–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: ${e.message}`);
        }
    }

    // Fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    async function fetchWithTimeout(url, options, timeout) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal,
                credentials: 'omit'
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            
            if (error.name === 'AbortError') {
                throw new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (${timeout} –º—Å)`);
            } else if (error.message.includes('Failed to fetch')) {
                throw new Error('Failed to fetch: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            }
            throw error;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ Kling (—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏)
    async function checkKlingTaskStatus(taskId, token) {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 30;
            const interval = 5000; // 5 —Å–µ–∫—É–Ω–¥
            
            const checkInterval = setInterval(async () => {
                attempts++;
                showStatus(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${attempts}/${maxAttempts})`);
                
                try {
                    const response = await fetchWithTimeout(`${KLING_API_URL}/${taskId}`, {
                        method: 'GET',
                        headers: { 
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }, 10000);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    if (data.code !== 0) {
                        throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
                    }
                    
                    const status = data.data.task_status;
                    
                    if (status === 'succeed') {
                        clearInterval(checkInterval);
                        resolve(data.data.task_result.images[0].url);
                    } else if (status === 'failed') {
                        clearInterval(checkInterval);
                        reject(new Error(data.data.task_status_msg || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
                    } else if (attempts >= maxAttempts) {
                        clearInterval(checkInterval);
                        reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
                    }
                } catch (error) {
                    if (attempts >= maxAttempts) {
                        clearInterval(checkInterval);
                        reject(new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`));
                    }
                }
            }, interval);
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç
    function addImageToChat(url, prompt) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', 'bot-message');
        messageDiv.innerHTML = `
            <div class="header-block">
                <span class="header-emoji">üé®</span>
                <strong>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</strong>
            </div>
            <img src="${url}" alt="${prompt}" class="generated-image">
            <p><em>–û–ø–∏—Å–∞–Ω–∏–µ:</em> ${prompt}</p>
        `;
        messagesDiv.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    function readFileAsText(file) {
        return new Promise((resolve, reject) => {
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5 –ú–ë)
            const MAX_SIZE = 5 * 1024 * 1024;
            if (file.size > MAX_SIZE) {
                reject(new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${formatFileSize(file.size)}). –ú–∞–∫—Å–∏–º—É–º 5 –ú–ë`));
                return;
            }
            
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            reader.readAsText(file);
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    function addMessage(content, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', `${sender}-message`);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        let formattedContent = content;
        formattedContent = formattedContent.replace(/```(\w+)?\s*([\s\S]*?)```/g, '<pre><code class="language-$1">$2</code></pre>');
        formattedContent = formattedContent.replace(/`([^`]+)`/g, '<code>$1</code>');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏
        formattedContent = formattedContent.replace(
            /^(\p{Emoji_Presentation}\s*)\*\*(.*?)\*\*/gmu, 
            '<div class="header-block"><span class="header-emoji">$1</span><strong>$2</strong></div>'
        );
        
        messageDiv.innerHTML = formattedContent;
        messagesDiv.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.id = 'typing-indicator';
        typingDiv.classList.add('message', 'bot-message');
        
        const typingContent = document.createElement('div');
        typingContent.className = 'typing-indicator';
        
        for (let i = 0; i < 3; i++) {
            const dot = document.createElement('div');
            dot.className = 'typing-dot';
            typingContent.appendChild(dot);
        }
        
        typingDiv.appendChild(typingContent);
        messagesDiv.appendChild(typingDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    // –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    function removeTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
    clearBtn.addEventListener('click', () => {
        messagesDiv.innerHTML = '';
        chatHistory = [
            {
                role: "system",
                content: BASE_PROMPT
            }
        ];
        showStatus('–ß–∞—Ç –æ—á–∏—â–µ–Ω üßπ');
    });
    
    // –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞
    exportBtn.addEventListener('click', () => {
        const chatContent = Array.from(messagesDiv.querySelectorAll('.message'))
            .map(msg => {
                const sender = msg.classList.contains('user-message') ? '–í—ã' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç';
                const textContent = msg.textContent;
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                const images = msg.querySelectorAll('.generated-image');
                let imageText = '';
                if (images.length > 0) {
                    imageText = '\n[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]: ' + Array.from(images)
                        .map(img => img.src)
                        .join('\n');
                }
                
                return `${sender}: ${textContent}${imageText}`;
            })
            .join('\n\n');
        
        const blob = new Blob([chatContent], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `deepseek-chat-${new Date().toISOString().slice(0, 10)}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        showStatus('–ß–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω üì•');
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    function showStatus(text) {
        statusDiv.textContent = text;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        clearTimeout(showStatus.timeout);
        if (text !== '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ') {
            showStatus.timeout = setTimeout(() => {
                statusDiv.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ';
            }, 5000);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    sendBtn.addEventListener('click', sendMessage);
    
    userInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    showStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ');
});
