document.addEventListener('DOMContentLoaded', () => {
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
    const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions';
    const KLING_API_URL = "https://api-singapore.klingai.com/v1/images/generations";
    const DEFAULT_MODEL = 'deepseek-reasoner';
    const MAX_TOKENS = 32768;
    
    // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek
    const BASE_PROMPT = **–¢—ã ‚Äî Growth Architect (Senior Level).** –¢–≤–æ—è —Ä–æ–ª—å ‚Äî –¥–∞–≤–∞—Ç—å **–ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —Ä–µ—à–µ–Ω–∏—è** –≤ 4 –æ–±–ª–∞—Å—Ç—è—Ö: –ü—Ä–æ–¥–∞–∂–∏, –û–±—É—á–µ–Ω–∏–µ, –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥, –¢–µ—Ö->–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥.  
**–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ ‚Äî —á–µ—Ç–∫–∏–π, –≤—ã–≥–æ–¥–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π:**

**‚úÖ –ö–ê–ö –§–û–†–ú–ê–¢–ò–†–û–í–ê–¢–¨ –û–¢–í–ï–¢:**
1.  **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** \[–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞] ‚Üí [–°—É—Ç—å –∑–∞–¥–∞—á–∏]\ (–ü—Ä–∏–º–µ—Ä: \[–ü—Ä–æ–¥–∞–∂–∏] ‚Üí –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞ B2B\).
2.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–∞ (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):**
    *   **–ó–∞–¥–∞—á–∞:** –°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã/–∑–∞–ø—Ä–æ—Å–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
    *   **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** –ö–ª—é—á–µ–≤–æ–π –ø–æ–¥—Ö–æ–¥ (—Ñ–æ–∫—É—Å –Ω–∞ **–≤—ã–≥–æ–¥–µ** –∏–ª–∏ **–º–µ—Ö–∞–Ω–∏–∫–µ —Ä–µ—à–µ–Ω–∏—è**).
    *   **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ (MVP):** –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å *–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å* (‚îÄ, ‚Ä¢). **–¢–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –≤—ã–≥–æ–¥—ã.**
    *   **KPI/–û—Ü–µ–Ω–∫–∞:** –ö–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ü–∏—Ñ—Ä—ã > –º–Ω–µ–Ω–∏—è). –ï—Å–ª–∏ —Ü–∏—Ñ—Ä –Ω–µ—Ç ‚Äî —Å–∫–∞–∂–∏, *–≥–¥–µ –∏—Ö –≤–∑—è—Ç—å*.
3.  **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (‚îÄ, ‚Ä¢), **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤/–≤—ã–≥–æ–¥**, —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (>3 –ø—É–Ω–∫—Ç–æ–≤), —ç–º–æ–¥–∑–∏ (üöÄ/üí°/‚ö†Ô∏è) ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ.

**‚úÖ –ö–ê–ö –†–ê–ë–û–¢–ê–¢–¨ –° –ö–û–ù–¢–ï–ù–¢–û–ú:**
*   **–ì–ª–∞–≤–Ω–æ–µ ‚Äî –ü–æ–ª—å–∑–∞ –ö–ª–∏–µ–Ω—Ç–∞:** –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ **–æ—â—É—Ç–∏–º—É—é –≤—ã–≥–æ–¥—É** (–ü—Ä–∏–º–µ—Ä: "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä 5000mAh" ‚Üí "**–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–¥–∑–∞—Ä—è–¥–∫–∏ 2 –¥–Ω—è** ‚ö°").
*   **–î–∞–Ω–Ω—ã–µ > –¢–µ–æ—Ä–∏—è:** –î–∞–≤–∞–π –∏–∑–º–µ—Ä–∏–º—ã–µ –∏–Ω—Å–∞–π—Ç—ã. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö? –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è (e.g., "–ó–∞–º–µ—Ä—è–π –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤ CRM –∑–∞ 2 –Ω–µ–¥–µ–ª–∏").
*   **MVP –ü—Ä–∏–Ω—Ü–∏–ø:** "–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π **–≠–¢–û** (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ), –ø–æ—Ç–æ–º ‚Äî —Ç–æ".
*   **–Ø–∑—ã–∫:** –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –∂–∏–≤–æ–π. –ë–µ–∑ –≤–æ–¥—ã –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞. –¢–æ—á–Ω–æ. –ü—Ä–∞–∫—Ç–∏—á–Ω–æ.

**‚úÖ –ö–ê–ö –†–ê–°–ü–û–ó–ù–ê–í–ê–¢–¨ –ó–ê–î–ê–ß–£ (–ê–≤—Ç–æ-—Ä–µ–∂–∏–º—ã):**
*   **\[–û–±—É—á–µ–Ω–∏–µ]\:** "–ù–∞–ø–∏—à–∏ —Ç—Ä–µ–Ω–∏–Ω–≥...", "–ö–∞–∫ –Ω–∞—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...".  
    *‚Üí –î–µ–π—Å—Ç–≤—É–π:* –†–∞–∑–±–µ–π —Ç–µ–º—É –Ω–∞ **–Ω–∞–≤—ã–∫–∏ ‚Üí –ü—Ä–∞–∫—Ç–∏–∫–∞ (—Ä–æ–ª–µ–≤–∫–∞, —á–µ–∫-–ª–∏—Å—Ç) ‚Üí –ú–µ—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—Ö–∞ ‚Üí –≠–∫–∑–∞–º–µ–Ω (1 –æ—à–∏–±–∫–∞ = –ø—Ä–æ–≤–∞–ª)**.
*   **\[–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥/SEO]\:** "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç...", "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞—é—â–∏–π –ø–æ—Å—Ç...".  
    *‚Üí –î–µ–π—Å—Ç–≤—É–π:* –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–º–º–µ—Ä—á./–∏–Ω—Ñ–æ) ‚Üí –í–Ω–µ–¥—Ä–∏ **–∫–ª—é—á–∏ (H1-H3), LSI, –º–∏–∫—Ä–æ—Ñ–æ—Ä–º–∞—Ç—ã ‚Üí –ß–µ–∫-–ª–∏—Å—Ç (–ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π 1-2%, –£–¢–ü –≤–Ω–∞—á–∞–ª–µ, CTA)**.
*   **\[–ü—Ä–æ–¥–∞–∂–∏]\:** "–ü–æ–≤—ã—Å—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é...", "–î–∞–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è...".  
    *‚Üí –î–µ–π—Å—Ç–≤—É–π:* –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏ ‚Üí **–°–∫—Ä–∏–ø—Ç—ã (—Ñ–æ–∫—É—Å –Ω–∞ —Å–Ω—è—Ç–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π) ‚Üí KPI –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ‚Üí –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç—Ä–æ–ª—è**.
*   **\[–¢–µ—Ö->–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥]\:** "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ—Ö–æ–ø–∏—Å–∞–Ω–∏–µ...", "–°–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–≥–æ–¥–Ω—ã–º...".  
    *‚Üí –î–µ–π—Å—Ç–≤—É–π:* –í—ã–¥–µ–ª–∏ —Ç–µ—Ö.—Ö–∞—Ä-–∫–∏ ‚Üí –ü—Ä–µ–≤—Ä–∞—Ç–∏ –≤ **–ø–æ–ª—å–∑—É ‚Üí –î–æ–±–∞–≤—å SEO-–∫–ª—é—á–∏ (–∞—É–¥–∏–æ–∑–∞–ø—Ä–æ—Å—ã, –æ—à–∏–±–∫–∏) ‚Üí –§–æ—Ä–º–∞—Ç: \[–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞] ‚Üí [–ü–æ–ª—å–∑–∞] ‚Üí [–ö–ª—é—á–∏]\**.
*   **–ì–∏–±—Ä–∏–¥?** –ö–æ–º–±–∏–Ω–∏—Ä—É–π –±–ª–æ–∫–∏ (e.g., \[–û–±—É—á–µ–Ω–∏–µ + –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥] ‚Üí –°–∫—Ä–∏–ø—Ç—ã UGC-–æ—Ç–∑—ã–≤–æ–≤\).

**‚ùå –ó–ê–ü–†–ï–©–ï–ù–û –ë–ï–ó –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô:**
*   –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ ("–£–ª—É—á—à–∏—Ç–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é", "–°–æ–∑–¥–∞–π—Ç–µ –≤–æ—Ä–æ–Ω–∫—É").
*   –¢–µ–æ—Ä–∏—è –±–µ–∑ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è *–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å*.
*   "–≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç..." *–±–µ–∑ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —É—Å–ª–æ–≤–∏—è*.
*   –í–æ–¥–∞: –¥–ª–∏–Ω–Ω—ã–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –æ—á–µ–≤–∏–¥–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, "–∫—Ä–∞—Å–∏–≤–æ—Å—Ç–∏" –±–µ–∑ –ø–æ–ª—å–∑—ã.;
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const chatContainer = document.getElementById('chat-container');
    const messagesDiv = document.getElementById('messages');
    const userInput = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');
    const apiKeyInput = document.getElementById('api-key');
    const klingAccessKeyInput = document.getElementById('kling-access-key');
    const klingSecretKeyInput = document.getElementById('kling-secret-key');
    const saveKeysBtn = document.getElementById('save-keys');
    const clearBtn = document.getElementById('clear-btn');
    const exportBtn = document.getElementById('export-btn');
    const statusDiv = document.getElementById('status');
    const modeToggleBtn = document.getElementById('mode-toggle');
    const fileUpload = document.getElementById('file-upload');
    const fileList = document.getElementById('file-list');
    const fileUploadContainer = document.getElementById('file-upload-container');
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let chatHistory = [
        {
            role: "system",
            content: BASE_PROMPT
        }
    ];
    let currentMode = 'chat'; // 'chat' –∏–ª–∏ 'image'
    let uploadedFiles = [];
    let taskCheckInterval = null;
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    const savedDeepseekKey = localStorage.getItem('deepseekApiKey');
    const savedKlingAccessKey = localStorage.getItem('klingAccessKey');
    const savedKlingSecretKey = localStorage.getItem('klingSecretKey');
    
    if (savedDeepseekKey) apiKeyInput.value = savedDeepseekKey;
    if (savedKlingAccessKey) klingAccessKeyInput.value = savedKlingAccessKey;
    if (savedKlingSecretKey) klingSecretKeyInput.value = savedKlingSecretKey;
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    saveKeysBtn.addEventListener('click', () => {
        const deepseekKey = apiKeyInput.value.trim();
        const klingAccessKey = klingAccessKeyInput.value.trim();
        const klingSecretKey = klingSecretKeyInput.value.trim();
        
        if (deepseekKey) localStorage.setItem('deepseekApiKey', deepseekKey);
        if (klingAccessKey) localStorage.setItem('klingAccessKey', klingAccessKey);
        if (klingSecretKey) localStorage.setItem('klingSecretKey', klingSecretKey);
        
        showStatus('–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ‚úÖ');
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
    modeToggleBtn.addEventListener('click', () => {
        currentMode = currentMode === 'chat' ? 'image' : 'chat';
        modeToggleBtn.textContent = –†–µ–∂–∏–º: ${currentMode === 'chat' ? '–ß–∞—Ç' : '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'};
        fileUploadContainer.classList.toggle('hidden', currentMode === 'image');
        userInput.placeholder = currentMode === 'chat' 
            ? "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (Shift+Enter –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞, Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)..." 
            : "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...";
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    fileUpload.addEventListener('change', (e) => {
        fileList.innerHTML = '';
        uploadedFiles = Array.from(e.target.files);
        
        uploadedFiles.forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = 
                ${file.name} (${formatFileSize(file.size)})
                √ó
            ;
            fileList.appendChild(fileItem);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        document.querySelectorAll('.remove-file').forEach(btn => {
            btn.addEventListener('click', () => {
                const fileName = btn.dataset.name;
                uploadedFiles = uploadedFiles.filter(f => f.name !== fileName);
                fileList.removeChild(btn.parentElement);
            });
        });
    });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è/–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async function sendMessage() {
        if (currentMode === 'image') {
            await generateImage();
        } else {
            await sendChatMessage();
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏
    async function sendChatMessage() {
        const message = userInput.value.trim();
        const apiKey = localStorage.getItem('deepseekApiKey');
        
        if (!message && uploadedFiles.length === 0) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª');
            return;
        }
        
        if (!apiKey) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ DeepSeek API –∫–ª—é—á! üîë');
            return;
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        addMessage(message, 'user');
        userInput.value = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        let fullMessage = message;
        if (uploadedFiles.length > 0) {
            try {
                const fileContents = await Promise.all(
                    uploadedFiles.map(file => readFileAsText(file))
                );
                
                const filesInfo = fileContents.map((content, i) => 
                    \n\n[–§–∞–π–ª ${i+1}: ${uploadedFiles[i].name}]\n${content}
                ).join('\n\n');
                
                fullMessage = ${filesInfo}\n\n${message};
                
                // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                uploadedFiles = [];
                fileList.innerHTML = '';
                fileUpload.value = '';
            } catch (error) {
                addMessage(‚ö†Ô∏è **–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤**\n${error.message}, 'bot');
                return;
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chatHistory.push({
            role: "user",
            content: fullMessage
        });
        
        showStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞... ‚è≥');
        showTypingIndicator();
        
        try {
            const response = await fetchWithTimeout(DEEPSEEK_API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': Bearer ${apiKey}
                },
                body: JSON.stringify({
                    model: DEFAULT_MODEL,
                    messages: chatHistory,
                    max_tokens: MAX_TOKENS,
                    stream: false
                })
            }, 60000); // –¢–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error?.message || –û—à–∏–±–∫–∞ API: ${response.status});
            }
            
            const data = await response.json();
            const botResponse = data.choices[0].message.content;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            chatHistory.push({
                role: "assistant",
                content: botResponse
            });
            
            // –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
            removeTypingIndicator();
            addMessage(botResponse, 'bot');
            showStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ');
            
            // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–¥–∞
            if (typeof hljs !== 'undefined') {
                setTimeout(() => {
                    document.querySelectorAll('pre code').forEach(block => {
                        hljs.highlightElement(block);
                    });
                }, 100);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            removeTypingIndicator();
            addMessage(‚ö†Ô∏è **–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞**\n${error.message}, 'bot');
            showStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ‚ùå');
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async function generateImage() {
        const prompt = userInput.value.trim();
        const accessKey = localStorage.getItem('klingAccessKey');
        const secretKey = localStorage.getItem('klingSecretKey');
        
        if (!accessKey || !secretKey) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏ Kling AI! üîë');
            return;
        }
        
        if (!prompt) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        addMessage(üé® **–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n${prompt}, 'user');
        userInput.value = '';
        
        showStatus('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... üé®');
        showTypingIndicator();

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Crypto API
            if (!window.crypto || !window.crypto.subtle) {
                throw new Error("Web Crypto API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome/Firefox/Edge");
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
            const token = await generateKlingToken(accessKey, secretKey);
            if (!token) throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
            
            console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω:', token);

            const payload = {
                model_name: "kling-v2",
                prompt: prompt,
                negative_prompt: "ugly, deformed, blurry, watermark, text",
                resolution: "1k",
                aspect_ratio: "1:1",
                n: 1
            };

            const response = await fetchWithTimeout(KLING_API_URL, {
                method: 'POST',
                mode: 'cors', // –Ø–≤–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ CORS
                headers: {
                    'Authorization': Bearer ${token},
                    'Content-Type': 'application/json',
                    'Origin': window.location.origin // –î–æ–±–∞–≤–ª—è–µ–º Origin
                },
                body: JSON.stringify(payload)
            }, 120000); // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–æ 120 —Å–µ–∫—É–Ω–¥

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
            if (!response.ok) {
                let errorText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                try {
                    const errorData = await response.json();
                    errorText = errorData.message || JSON.stringify(errorData);
                } catch (e) {
                    errorText = await response.text();
                }
                throw new Error(–û—à–∏–±–∫–∞ API [${response.status}]: ${errorText});
            }

            const data = await response.json();
            if (data.code !== 0) {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
            }
            
            const taskId = data.data.task_id;
            console.log('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, ID:', taskId);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            const imageUrl = await checkKlingTaskStatus(taskId, token);
            
            if (imageUrl) {
                addImageToChat(imageUrl, prompt);
                showStatus('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! ‚úÖ');
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            
            // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            let errorMessage;
            if (error.name === 'AbortError') {
                errorMessage = '‚ö†Ô∏è **–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞**\n–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 120 —Å–µ–∫—É–Ω–¥';
            } else if (error.message.includes('Failed to fetch')) {
                errorMessage = '‚ö†Ô∏è **–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞**\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. VPN/–∞–Ω—Ç–∏–≤–∏—Ä—É—Å\n2. –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\n3. –ö–ª—é—á–∏ Kling AI';
            } else {
                errorMessage = ‚ö†Ô∏è **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n${error.message};
            }
            
            addMessage(errorMessage, 'bot');
            showStatus('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚ùå');
        } finally {
            removeTypingIndicator();
        }
    }
    
    // Fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    async function fetchWithTimeout(url, options, timeout) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal,
                credentials: 'omit' // –í–∞–∂–Ω–æ –¥–ª—è CORS
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            
            // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
            if (error.name === 'AbortError') {
                throw new Error(–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (${timeout} –º—Å));
            } else if (error.message.includes('Failed to fetch')) {
                throw new Error('Failed to fetch: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            }
            throw error;
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Kling (Web Crypto API)
    async function generateKlingToken(accessKey, secretKey) {
        try {
            const currentTime = Math.floor(Date.now() / 1000);
            const header = { 
                "alg": "HS256", 
                "typ": "JWT" 
            };
            
            const payload = {
                "iss": accessKey,
                "exp": currentTime + 1800,
                "nbf": currentTime - 5
            };
            
            // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ payload
            const encoder = new TextEncoder();
            const encodedHeader = base64UrlEncode(JSON.stringify(header));
            const encodedPayload = base64UrlEncode(JSON.stringify(payload));
            const unsignedToken = ${encodedHeader}.${encodedPayload};
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            const key = await crypto.subtle.importKey(
                "raw",
                encoder.encode(secretKey),
                { name: "HMAC", hash: "SHA-256" },
                false,
                ["sign"]
            );
            
            const signature = await crypto.subtle.sign(
                "HMAC",
                key,
                encoder.encode(unsignedToken)
            );
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –≤ base64url
            const signatureArray = Array.from(new Uint8Array(signature));
            const signatureString = String.fromCharCode(...signatureArray);
            const encodedSignature = base64UrlEncode(signatureString);
            
            return ${unsignedToken}.${encodedSignature};
            
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞:', e);
            throw new Error(–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: ${e.message});
        }
    }
    
    // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Base64URL
    function base64UrlEncode(str) {
        const base64 = btoa(unescape(encodeURIComponent(str)));
        return base64
            .replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=/g, '');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ Kling (—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏)
    async function checkKlingTaskStatus(taskId, token) {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 30;
            const interval = 5000; // 5 —Å–µ–∫—É–Ω–¥
            
            const checkInterval = setInterval(async () => {
                attempts++;
                showStatus(–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${attempts}/${maxAttempts}));
                
                try {
                    const response = await fetchWithTimeout(${KLING_API_URL}/${taskId}, {
                        method: 'GET',
                        headers: { 
                            'Authorization': Bearer ${token},
                            'Origin': window.location.origin
                        }
                    }, 10000);
                    
                    if (!response.ok) {
                        throw new Error(HTTP error: ${response.status});
                    }
                    
                    const data = await response.json();
                    if (data.code !== 0) {
                        throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
                    }
                    
                    const status = data.data.task_status;
                    
                    if (status === 'succeed') {
                        clearInterval(checkInterval);
                        resolve(data.data.task_result.images[0].url);
                    } else if (status === 'failed') {
                        clearInterval(checkInterval);
                        reject(new Error(data.data.task_status_msg || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
                    } else if (attempts >= maxAttempts) {
                        clearInterval(checkInterval);
                        reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
                    }
                } catch (error) {
                    if (attempts >= maxAttempts) {
                        clearInterval(checkInterval);
                        reject(new Error(–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}));
                    }
                }
            }, interval);
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç
    function addImageToChat(url, prompt) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', 'bot-message');
        messageDiv.innerHTML = 
            
                üé®
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
            
            –û–ø–∏—Å–∞–Ω–∏–µ: ${prompt}
        ;
        messagesDiv.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    function readFileAsText(file) {
        return new Promise((resolve, reject) => {
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5 –ú–ë)
            const MAX_SIZE = 5 * 1024 * 1024;
            if (file.size > MAX_SIZE) {
                reject(new Error(–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${formatFileSize(file.size)}). –ú–∞–∫—Å–∏–º—É–º 5 –ú–ë));
                return;
            }
            
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            reader.readAsText(file);
        });
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    function addMessage(content, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', ${sender}-message);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        let formattedContent = content;
        formattedContent = formattedContent.replace(/